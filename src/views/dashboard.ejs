<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BOT_PISTAS Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            --warning-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --info-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --dark-bg: #1a1d29;
            --card-bg: #2d3748;
            --text-light: #e2e8f0;
        }

        body {
            background: var(--dark-bg);
            color: var(--text-light);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .navbar {
            background: var(--primary-gradient) !important;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }

        .navbar-brand {
            font-weight: bold;
            font-size: 1.5rem;
        }

        .main-container {
            padding: 2rem 0;
        }

        .dashboard-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .dashboard-title {
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .dashboard-subtitle {
            color: #94a3b8;
            font-size: 1.1rem;
        }

        .status-card, .qr-card, .stats-card {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            border: 1px solid rgba(255,255,255,0.1);
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }

        .status-connected { background-color: #10b981; }
        .status-disconnected { background-color: #ef4444; }
        .status-connecting { background-color: #f59e0b; }

        .qr-container {
            text-align: center;
            padding: 2rem;
            background: rgba(255,255,255,0.05);
            border-radius: 10px;
            margin: 1rem 0;
        }

        .qr-image {
            max-width: 280px;
            width: 100%;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.5);
        }

        .stat-card {
            background: var(--card-bg);
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
            border: 1px solid rgba(255,255,255,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0,0,0,0.4);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #94a3b8;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .stat-icon {
            font-size: 2rem;
            margin-bottom: 1rem;
            opacity: 0.8;
        }

        .users-stat { color: #3b82f6; }
        .songs-stat { color: #10b981; }
        .downloads-stat { color: #f59e0b; }
        .uptime-stat { color: #8b5cf6; }

        .btn-logout {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            border: none;
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-logout:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(239, 68, 68, 0.4);
            color: white;
        }
        
        .btn-warning {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            border: none;
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .btn-warning:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(245, 158, 11, 0.4);
            color: white;
        }

        .btn-stats {
            background: var(--info-gradient);
            border: none;
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            color: white;
            font-weight: 600;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s ease;
        }

        .btn-stats:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(79, 172, 254, 0.4);
            color: white;
            text-decoration: none;
        }

        .logs-container {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 1.5rem;
            margin-top: 2rem;
            border: 1px solid rgba(255,255,255,0.1);
            max-height: 400px;
            overflow-y: auto;
        }

        .log-entry {
            padding: 0.5rem 0.75rem;
            margin: 0.25rem 0;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
            font-size: 0.85rem;
        }

        .log-info { background-color: rgba(59, 130, 246, 0.1); color: #93c5fd; }
        .log-error { background-color: rgba(239, 68, 68, 0.1); color: #fca5a5; }
        .log-warn { background-color: rgba(245, 158, 11, 0.1); color: #fcd34d; }
        
        /* Asegurar que todo el texto sea visible */
        .text-muted { color: #a0aec0 !important; }
        p, span, small { color: var(--text-light); }

        .loading-spinner {
            border: 3px solid rgba(255,255,255,0.1);
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .alert-custom {
            border-radius: 10px;
            border: none;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .section-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 1.5rem;
        }

        @media (max-width: 768px) {
            .dashboard-title { font-size: 2rem; }
            .stat-number { font-size: 2rem; }
            .action-buttons { flex-direction: column; }
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class="fas fa-music me-2"></i>BOT_PISTAS Dashboard
            </a>
            <div class="navbar-nav ms-auto">
                <a class="btn btn-stats" href="/dashboard/stats">
                    <i class="fas fa-chart-bar me-2"></i>Estadísticas Detalladas
                </a>
            </div>
        </div>
    </nav>

    <div class="container main-container">
        <!-- Header -->
        <div class="dashboard-header">
            <h1 class="dashboard-title">
                <i class="fas fa-robot me-3"></i>Panel de Control BOT_PISTAS
            </h1>
            <p class="dashboard-subtitle">
                Monitoreo en tiempo real • Última actualización: <span id="lastUpdate"></span>
            </p>
        </div>

        <div class="row">
            <!-- Estado de WhatsApp -->
            <div class="col-lg-6 col-md-12">
                <div class="status-card">
                    <h5 class="section-title">
                        <i class="fab fa-whatsapp"></i>Estado de WhatsApp
                    </h5>
                    <div class="d-flex align-items-center mb-3">
                        <span class="status-indicator" id="statusIndicator"></span>
                        <span id="connectionStatus" class="fw-bold fs-5">Cargando...</span>
                    </div>
                    <p class="text-muted mb-0">
                        <small>Última conexión: <span id="lastConnection">--</span></small>
                    </p>
                    
                    <!-- Botones de acción -->
                    <div class="mt-3 d-flex flex-column gap-2">
                        <!-- Botón de Cerrar Sesión (visible cuando está conectado) -->
                        <div id="logoutButtonContainer" style="display: none;">
                            <button class="btn btn-logout w-100" onclick="cerrarSesion()">
                                <i class="fas fa-sign-out-alt me-2"></i>Cerrar Sesión
                            </button>
                        </div>
                        
                        <!-- Botón de Reiniciar QR (siempre visible) -->
                        <div>
                            <button class="btn btn-warning w-100" onclick="reiniciarQR()">
                                <i class="fas fa-sync-alt me-2"></i>Reiniciar QR y Borrar Sesión
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Código QR -->
            <div class="col-lg-6 col-md-12">
                <div class="qr-card">
                    <h5 class="section-title">
                        <i class="fas fa-qrcode"></i>Código QR
                    </h5>
                    <div class="qr-container" id="qrContainer">
                        <div class="loading-spinner"></div>
                        <p class="mt-3 text-muted">Esperando código QR...</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Estadísticas Principales -->
        <div class="row">
            <div class="col-12">
                <div class="stats-card">
                    <h5 class="section-title">
                        <i class="fas fa-chart-line"></i>Estadísticas del Bot
                    </h5>
                    <div class="row">
                        <div class="col-lg-3 col-md-6 mb-3">
                            <div class="stat-card">
                                <div class="stat-icon users-stat">
                                    <i class="fas fa-users"></i>
                                </div>
                                <div class="stat-number users-stat" id="totalUsers">0</div>
                                <div class="stat-label">Usuarios Registrados</div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6 mb-3">
                            <div class="stat-card">
                                <div class="stat-icon songs-stat">
                                    <i class="fas fa-music"></i>
                                </div>
                                <div class="stat-number songs-stat" id="totalSongs">0</div>
                                <div class="stat-label">Canciones Disponibles</div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6 mb-3">
                            <div class="stat-card">
                                <div class="stat-icon downloads-stat">
                                    <i class="fas fa-download"></i>
                                </div>
                                <div class="stat-number downloads-stat" id="totalDownloads">0</div>
                                <div class="stat-label">Descargas Totales</div>
                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6 mb-3">
                            <div class="stat-card">
                                <div class="stat-icon uptime-stat">
                                    <i class="fas fa-clock"></i>
                                </div>
                                <div class="stat-number uptime-stat">24/7</div>
                                <div class="stat-label">Servicio Activo</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Logs del Sistema -->
        <div class="row">
            <div class="col-12">
                <div class="logs-container">
                    <h5 class="section-title">
                        <i class="fas fa-terminal"></i>Logs del Sistema
                    </h5>
                    <div id="logsContainer">
                        <div class="log-entry log-info">
                            <span class="text-muted">3:54:42 p.m.</span> Bot iniciado correctamente
                        </div>
                        <div class="log-entry log-info">
                            <span class="text-muted">3:54:42 p.m.</span> 0 usuarios registrados
                        </div>
                        <div class="log-entry log-info">
                            <span class="text-muted">3:54:42 p.m.</span> 0 canciones disponibles
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let dashboardState = {
            connected: false,
            qrCode: null,
            stats: {
                users: 0,
                songs: 0,
                downloads: 0
            }
        };

        // Actualizar timestamp
        function updateTimestamp() {
            const now = new Date();
            document.getElementById('lastUpdate').textContent = now.toLocaleString('es-ES');
        }

        // Actualizar estado de conexión
        function updateConnectionStatus(connected, lastConnection = null) {
            const statusElement = document.getElementById('connectionStatus');
            const indicatorElement = document.getElementById('statusIndicator');
            const logoutContainer = document.getElementById('logoutButtonContainer');
            
            if (connected) {
                statusElement.textContent = 'Conectado';
                statusElement.className = 'fw-bold fs-5 text-success';
                indicatorElement.className = 'status-indicator status-connected';
                logoutContainer.style.display = 'block';
            } else {
                statusElement.textContent = 'Desconectado';
                statusElement.className = 'fw-bold fs-5 text-danger';
                indicatorElement.className = 'status-indicator status-disconnected';
                logoutContainer.style.display = 'none';
            }
            
            if (lastConnection) {
                document.getElementById('lastConnection').textContent = lastConnection;
            }
            
            dashboardState.connected = connected;
        }

        // Actualizar estadísticas
        function updateStats(stats) {
            try {
                if (!stats) return;
                
                // Compatibilidad con ambos formatos de estadísticas
                const users = stats.usuariosRegistrados || stats.users || 0;
                const songs = stats.cancionesDisponibles || stats.songs || 0;
                const downloads = stats.descargasTotales || stats.downloads || 0;
                
                // Actualizar elementos en el DOM usando los IDs correctos
                document.getElementById('totalUsers').textContent = users;
                document.getElementById('totalSongs').textContent = songs;
                document.getElementById('totalDownloads').textContent = downloads;
                
                // Actualizar estado interno
                dashboardState.stats = { users, songs, downloads };
                
                console.log('Estadísticas actualizadas:', { users, songs, downloads });
            } catch (error) {
                console.error('Error al actualizar estadísticas:', error);
            }
        }
        
        // Actualizar código QR
        function updateQRCode(qrData) {
            const qrContainer = document.getElementById('qrContainer');
            
            if (qrData) {
                qrContainer.innerHTML = `
                    <img src="${qrData}" alt="Código QR WhatsApp" class="qr-image">
                    <p class="mt-3 text-info">
                        <i class="fas fa-mobile-alt me-2"></i>Escanea este código con WhatsApp
                    </p>
                `;
            } else if (dashboardState.connected) {
                qrContainer.innerHTML = `
                    <div class="text-success">
                        <i class="fas fa-check-circle" style="font-size: 4rem; margin-bottom: 1rem;"></i>
                        <h4>WhatsApp Conectado</h4>
                        <p class="text-muted">El bot está funcionando correctamente</p>
                    </div>
                `;
            } else {
                qrContainer.innerHTML = `
                    <div class="loading-spinner"></div>
                    <p class="mt-3 text-muted">Esperando código QR...</p>
                `;
            }
        }

        // Función para cerrar sesión
        async function cerrarSesion() {
            if (!confirm('¿Estás seguro de que quieres cerrar la sesión de WhatsApp? Esto borrará todos los archivos de sesión y generará un nuevo código QR.')) {
                return;
            }

            const logoutContainer = document.getElementById('logoutButtonContainer');
            const originalContent = logoutContainer.innerHTML;
            
            // Mostrar loading
            logoutContainer.innerHTML = `
                <button class="btn btn-logout w-100" disabled>
                    <div class="loading-spinner" style="width: 20px; height: 20px; display: inline-block; margin-right: 8px;"></div>
                    Cerrando sesión...
                </button>
            `;

            try {
                const response = await fetch('/api/logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    // Actualizar estado inmediatamente
                    updateConnectionStatus(false);
                    updateQRCode(null);
                    
                    // Mostrar mensaje de éxito
                    showAlert('Sesión cerrada correctamente. Generando nuevo código QR...', 'success');
                    
                    // Actualizar dashboard después de un breve delay
                    setTimeout(() => {
                        fetchDashboardData();
                    }, 2000);
                } else {
                    throw new Error(result.message || 'Error al cerrar sesión');
                }
            } catch (error) {
                console.error('Error al cerrar sesión:', error);
                showAlert('Error al cerrar sesión: ' + error.message, 'danger');
                logoutContainer.innerHTML = originalContent;
            }
        }
        
        // Función para reiniciar QR y borrar archivos de sesión
        async function reiniciarQR() {
            if (!confirm('¿Estás seguro de que quieres reiniciar el código QR? Esto borrará todos los archivos de sesión actuales.')) {
                return;
            }
            
            // Obtener el botón y guardar su contenido original
            const btnReiniciar = document.querySelector('.btn-warning');
            const originalContent = btnReiniciar.innerHTML;
            
            // Mostrar loading
            btnReiniciar.disabled = true;
            btnReiniciar.innerHTML = `
                <div class="loading-spinner" style="width: 20px; height: 20px; display: inline-block; margin-right: 8px;"></div>
                Reiniciando QR...
            `;
            
            try {
                console.log('Iniciando reinicio de QR...');
                
                // Limpiar localStorage primero para evitar usar QR antiguos
                localStorage.removeItem('lastQrCode');
                localStorage.removeItem('qrTimestamp');
                
                // Actualizar estado inmediatamente para mostrar carga
                updateConnectionStatus(false);
                updateQRCode(null);
                
                // Mostrar mensaje de espera
                const qrContainer = document.getElementById('qrContainer');
                qrContainer.innerHTML = `
                    <div class="text-center">
                        <div class="loading-spinner mb-3"></div>
                        <p class="text-info">Reiniciando código QR...</p>
                        <p class="text-muted">Espere un momento por favor</p>
                    </div>
                `;
                
                // Llamar al endpoint de reinicio de QR
                const response = await fetch('/api/reset-qr', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    // Agregar un timeout para evitar esperas infinitas
                    signal: AbortSignal.timeout(15000) // 15 segundos máximo
                });
                
                // Verificar si la respuesta es exitosa
                if (!response.ok) {
                    throw new Error(`Error HTTP: ${response.status}`);
                }
                
                // Intentar parsear la respuesta como JSON
                let result;
                const responseText = await response.text();
                
                try {
                    result = JSON.parse(responseText);
                } catch (parseError) {
                    console.error('Error al parsear JSON:', responseText);
                    throw new Error('Respuesta del servidor no es un JSON válido');
                }
                
                if (result && result.success) {
                    // Mostrar mensaje de éxito
                    showAlert('Código QR reiniciado correctamente. Generando nuevo QR...', 'success');
                    
                    // Actualizar dashboard después de un breve delay
                    setTimeout(() => {
                        fetchDashboardData();
                    }, 2000);
                    
                    // Programar actualizaciones adicionales por si acaso
                    setTimeout(() => fetchDashboardData(), 5000);
                    setTimeout(() => fetchDashboardData(), 10000);
                } else {
                    throw new Error(result?.message || 'Error desconocido al reiniciar el código QR');
                }
            } catch (error) {
                console.error('Error al reiniciar QR:', error);
                showAlert('Error al reiniciar QR: ' + error.message, 'danger');
                
                // Intentar actualizar el dashboard de todos modos
                setTimeout(() => {
                    fetchDashboardData();
                }, 3000);
            } finally {
                // Restaurar el botón
                btnReiniciar.disabled = false;
                btnReiniciar.innerHTML = originalContent;
            }
        }

        // Mostrar alertas
        function showAlert(message, type) {
            const alertContainer = document.createElement('div');
            alertContainer.className = `alert alert-${type} alert-custom alert-dismissible fade show`;
            alertContainer.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.querySelector('.main-container').insertBefore(alertContainer, document.querySelector('.main-container').firstChild);
            
            // Auto-dismiss después de 5 segundos
            setTimeout(() => {
                if (alertContainer.parentNode) {
                    alertContainer.remove();
                }
            }, 5000);
        }

        // Obtener datos del dashboard
        async function fetchDashboardData() {
            try {
                // Usar AbortSignal para evitar esperas infinitas
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 segundos timeout
                
                const response = await fetch('/api/dashboard-data', {
                    signal: controller.signal,
                    cache: 'no-store', // Evitar caché para siempre obtener datos frescos
                    headers: {
                        'Cache-Control': 'no-cache',
                        'Pragma': 'no-cache'
                    }
                });
                
                clearTimeout(timeoutId);
                
                if (!response.ok) {
                    throw new Error(`Error HTTP: ${response.status}`);
                }
                
                // Intentar parsear la respuesta como JSON
                let responseText = await response.text();
                let data;
                
                try {
                    data = JSON.parse(responseText);
                } catch (parseError) {
                    console.error('Error al parsear JSON:', responseText);
                    throw new Error('Respuesta del servidor no es un JSON válido');
                }
                
                // Actualizar estado de conexión
                updateConnectionStatus(data.connected, data.lastConnection);
                
                // Asegurarnos de que el QR se actualice correctamente
                if (data.qrCode) {
                    console.log('QR recibido del servidor');
                    updateQRCode(data.qrCode);
                    // Guardar en localStorage para persistencia
                    localStorage.setItem('lastQrCode', data.qrCode);
                    localStorage.setItem('qrTimestamp', Date.now());
                } else if (data.connected) {
                    // Si está conectado, mostrar mensaje de conectado
                    console.log('Bot conectado, eliminando QR guardado');
                    updateQRCode(null);
                    localStorage.removeItem('lastQrCode');
                    localStorage.removeItem('qrTimestamp');
                } else {
                    console.log('Sin QR del servidor y desconectado');
                    // Si no hay QR y no está conectado, intentar recuperar del localStorage
                    const savedQR = localStorage.getItem('lastQrCode');
                    const qrTimestamp = localStorage.getItem('qrTimestamp');
                    
                    // Solo usar el QR guardado si tiene menos de 2 minutos
                    if (savedQR && qrTimestamp && (Date.now() - parseInt(qrTimestamp)) < 120000) {
                        console.log('Usando QR guardado en localStorage');
                        updateQRCode(savedQR);
                    } else {
                        console.log('QR guardado expirado o no disponible');
                        updateQRCode(null);
                        localStorage.removeItem('lastQrCode');
                        localStorage.removeItem('qrTimestamp');
                        
                        // Mostrar mensaje de espera específico
                        const qrContainer = document.getElementById('qrContainer');
                        qrContainer.innerHTML = `
                            <div class="text-center">
                                <div class="loading-spinner mb-3"></div>
                                <p class="text-info">Esperando nuevo código QR...</p>
                                <p class="text-muted">Si el código no aparece en 10 segundos, intenta reiniciar el QR con el botón amarillo</p>
                            </div>
                        `;
                    }
                }
                
                // Actualizar estadísticas solo si existen
                if (data && data.stats) {
                    updateStats(data.stats);
                }
                
                updateTimestamp();
            } catch (error) {
                console.error('Error fetching dashboard data:', error);
                
                // En caso de error, intentar mostrar el QR guardado
                const savedQR = localStorage.getItem('lastQrCode');
                const qrTimestamp = localStorage.getItem('qrTimestamp');
                
                if (savedQR && qrTimestamp && (Date.now() - parseInt(qrTimestamp)) < 120000) {
                    console.log('Error en fetch, usando QR guardado del localStorage');
                    updateQRCode(savedQR);
                } else {
                    // Si no hay QR guardado o expiró, mostrar mensaje de error
                    const qrContainer = document.getElementById('qrContainer');
                    qrContainer.innerHTML = `
                        <div class="text-center">
                            <div class="text-danger mb-3">
                                <i class="fas fa-exclamation-triangle" style="font-size: 3rem;"></i>
                            </div>
                            <p class="text-danger">Error al cargar datos del dashboard</p>
                            <p class="text-muted">Intenta reiniciar el QR o recargar la página</p>
                            <button class="btn btn-sm btn-primary mt-2" onclick="window.location.reload()">Recargar página</button>
                        </div>
                    `;
                }
                
                // Mostrar alerta de error
                showAlert('Error al cargar datos: ' + error.message, 'danger');
            }
        }

        // Inicializar dashboard
        document.addEventListener('DOMContentLoaded', function() {
            updateTimestamp();
            fetchDashboardData();
            
            // Actualizar cada 5 segundos
            setInterval(fetchDashboardData, 5000);
            setInterval(updateTimestamp, 1000);
        });
    </script>
</body>
</html>
